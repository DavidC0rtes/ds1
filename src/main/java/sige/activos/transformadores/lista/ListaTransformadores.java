package sige.activos.transformadores.lista;

import javax.swing.table.DefaultTableModel;
import java.awt.*;
import javax.swing.*;
import java.awt.event.ActionEvent;
import sige.misc.TableCellListener;

import sige.db.JDBCConnection;
import sige.misc.TableCellListener;

/**
 *
 * @author david
 */
public class ListaTransformadores extends JPanel {

	private ModeloListaTran modelo;
	private DefaultTableModel modeloTabla;
    /**
     * Creates new form ListaTransformadores
     */
    public ListaTransformadores(JDBCConnection DB) {
    	modelo = new ModeloListaTran(DB);
        initComponents();
        tablaTransfor.setVisible(false);
        setComboOptions();
        setGenericModel();

    }

    private boolean isCellEditable(int row, int col) {
    	if (col == 0) {
    		return false;
    	}
    	return true;
    }

    private void setGenericModel() {
    	tablaTransfor.setModel(new DefaultTableModel(
                new Object [][] {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },

                new String [] {
                    "Serial", "Capacidad (KWh)", "Activo"
                }));

    	Action action = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				TableCellListener tcl = (TableCellListener) e.getSource();
				if (isCellEditable(tcl.getRow(), tcl.getColumn())) {
					modelo.updateData(
							tcl.getColumn(),
							String.valueOf(tablaTransfor.getValueAt(tcl.getRow(), 0)),
							String.valueOf(tcl.getNewValue()));
				}

			}
    	};
    	TableCellListener tcl = new TableCellListener(tablaTransfor, action);
    }
    private void setComboOptions() {
    	String[] options = modelo.getSubes().toArray(new String[0]);
    	comboSubes.removeAllItems();
    	for (String s : options) {
    		comboSubes.addItem(s);
    	}
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        comboSubes = new JComboBox<>();
        consultarBtn = new JButton();
        jScrollPane1 = new JScrollPane();
        tablaTransfor = new JTable();

        jLabel1.setFont(new Font("SF Pro Rounded", 0, 18)); // NOI18N
        jLabel1.setText("Escoja una subestación");

        comboSubes.setFont(new Font("SF Pro Text", 0, 14)); // NOI18N
        comboSubes.setModel(new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboSubes.setToolTipText("Escoja una subestación");

        consultarBtn.setFont(new Font("SF Pro Rounded", 0, 14)); // NOI18N
        consultarBtn.setText("Consultar");
        consultarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                consultarBtnActionPerformed(evt);
            }
        });

        tablaTransfor.setFont(new Font("SF Pro Rounded", 0, 14)); // NOI18N
        tablaTransfor.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaTransfor);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(comboSubes, GroupLayout.PREFERRED_SIZE, 252, GroupLayout.PREFERRED_SIZE)
                    .addComponent(consultarBtn, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE))
                .addGap(118, 118, 118))
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 702, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboSubes, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(consultarBtn)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 499, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void consultarBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_consultarBtnActionPerformed

    	((DefaultTableModel) tablaTransfor.getModel()).setRowCount(0);


    	DefaultTableModel test = new DefaultTableModel(modelo.convertData(String.valueOf(comboSubes.getSelectedItem())),
    			new String[] {"Serial", "Capacidad (KWh)", "Activo"} );

    	tablaTransfor.setModel(test);


    	((DefaultTableModel) tablaTransfor.getModel()).fireTableDataChanged();

    	if (tablaTransfor.isVisible() == false) {
            tablaTransfor.setVisible(true);
        }
    }//GEN-LAST:event_consultarBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JComboBox<String> comboSubes;
    private JButton consultarBtn;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JTable tablaTransfor;
    // End of variables declaration//GEN-END:variables
}
